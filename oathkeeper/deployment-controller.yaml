# Source: oathkeeper/templates/deployment-controller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-oathkeeper
  namespace: default
  labels:
    app.kubernetes.io/name: oathkeeper
    helm.sh/chart: oathkeeper-0.5.3
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "v0.38.4-beta.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: oathkeeper
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oathkeeper
        helm.sh/chart: oathkeeper-0.5.3
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/version: "v0.38.4-beta.1"
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      volumes:
        - name: oathkeeper-config-volume
          configMap:
            name: oathkeeper-config
        - name: oathkeeper-rules-volume
          configMap:
            name: oathkeeper-rules
        - name: oathkeeper-secrets-volume
          secret:
            secretName: oathkeeper-jwk  
      containers:
        - name: oathkeeper
          image: "oryd/oathkeeper:v0.38.9-beta.1"
          imagePullPolicy: IfNotPresent
          command: [ "oathkeeper", "serve", "--config", "/etc/config/config.yaml" ]
          env:
            - name: MUTATORS_ID_TOKEN_CONFIG_JWKS_URL
              value: "file:///etc/secrets/mutator.id_token.jwks.json"
          volumeMounts:
            - name: oathkeeper-config-volume
              mountPath: /etc/config
              readOnly: true
            - name: oathkeeper-rules-volume
              mountPath: /etc/rules
              readOnly: true
            - name: oathkeeper-secrets-volume
              mountPath: /etc/secrets
              readOnly: true
          ports:
            - name: http-api
              containerPort: 4456
              protocol: TCP
            - name: http-proxy
              containerPort: 4455
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/alive
              port: http-api
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http-api
          resources:
            {}
---